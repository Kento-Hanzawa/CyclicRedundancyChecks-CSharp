<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
    var infos = new (string CRCName, Type CRCType, int SizeAsByte, int SizeAsBit)[]
    {
        ( "CRC8"  , typeof(byte)  , sizeof(byte)  , sizeof(byte)   * 8 ),
        ( "CRC16" , typeof(ushort), sizeof(ushort), sizeof(ushort) * 8 ),
        ( "CRC32" , typeof(uint)  , sizeof(uint)  , sizeof(uint)   * 8 ),
        ( "CRC64" , typeof(ulong) , sizeof(ulong) , sizeof(ulong)  * 8 ),
    };
#>
using System;
using System.Text;
using Xunit;

namespace CyclicRedundancyChecks.Tests
{
    public class CRCUtilityTests
    {
        #region CRCUtility.BitReverse()

<# foreach (var info in infos) { #>
        [Theory]
        [InlineData(0b_<#= "1100011111010111001011111011101111011011011111011010101111101111".Substring(0, info.SizeAsBit) #>, 0b_<#= "1111011111010101101111101101101111011101111101001110101111100011".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "1011110101000110110110110110000110010100001100110011011101111001".Substring(0, info.SizeAsBit) #>, 0b_<#= "1001111011101100110011000010100110000110110110110110001010111101".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "0000011010010010111000010101110001101100110011011001001000001100".Substring(0, info.SizeAsBit) #>, 0b_<#= "0011000001001001101100110011011000111010100001110100100101100000".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "0110000010101011000110010111111111010000110000010111100101101000".Substring(0, info.SizeAsBit) #>, 0b_<#= "0001011010011110100000110000101111111110100110001101010100000110".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "0001100100001001011011111101100111011110110011011100111110100011".Substring(0, info.SizeAsBit) #>, 0b_<#= "1100010111110011101100110111101110011011111101101001000010011000".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "1001000000101100101111111011110100001100101101011100010001001101".Substring(0, info.SizeAsBit) #>, 0b_<#= "1011001000100011101011010011000010111101111111010011010000001001".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "1001110101110100010011110100100000010101110110000001101111100010".Substring(0, info.SizeAsBit) #>, 0b_<#= "0100011111011000000110111010100000010010111100100010111010111001".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "1100010111101100000011111101110000001000000000000000101011011101".Substring(0, info.SizeAsBit) #>, 0b_<#= "1011101101010000000000000001000000111011111100000011011110100011".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "1110100100100100001010111010100010010001011000100010011111110101".Substring(0, info.SizeAsBit) #>, 0b_<#= "1010111111100100010001101000100100010101110101000010010010010111".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        [InlineData(0b_<#= "0011100001010000111100010111000111101000100111000110111110001111".Substring(0, info.SizeAsBit) #>, 0b_<#= "1111000111110110001110010001011110001110100011110000101000011100".Substring(64 - info.SizeAsBit, info.SizeAsBit) #>)]
        public void BitReverse_<#= info.CRCType.Name #>(global::<#= info.CRCType.Namespace #>.<#= info.CRCType.Name #> value, global::<#= info.CRCType.Namespace #>.<#= info.CRCType.Name #> expected)
        {
            Assert.Equal(expected, CRCUtility.BitReverse(value));
        }

<# } #>
        #endregion
    }
}
