<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CyclicRedundancyChecks</name>
    </assembly>
    <members>
        <member name="T:CyclicRedundancyChecks.CRC">
            <summary>
            CRC (Cyclic Redundancy Check) のすべての実装が継承する必要のある抽象基底クラスを表します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC.RegisterAlgorithm">
            <summary>
            CRC の実装を <see cref="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])"/> を使用して登録します。
            </summary>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC1">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC1"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC1.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC1"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC2">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC2"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC2.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC2"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC3">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC3"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC3.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC3"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC4">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC4"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC4.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC4"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC5">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC5"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC5.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC5"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC6">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC6"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC6.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC6"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC7">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC7"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC7.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC7"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC8">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC8"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC8.#ctor(System.Byte,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC8"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC9">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC9"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC9.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC9"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC10">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC10"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC10.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC10"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC11">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC11"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC11.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC11"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC12">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC12"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC12.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC12"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC13">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC13"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC13.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC13"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC14">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC14"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC14.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC14"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC15">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC15"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC15.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC15"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC16">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC16"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC16.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC16"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC17">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC17"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC17.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC17"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC18">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC18"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC18.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC18"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC19">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC19"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC19.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC19"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC20">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC20"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC20.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC20"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC21">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC21"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC21.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC21"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC22">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC22"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC22.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC22"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC23">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC23"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC23.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC23"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC24">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC24"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC24.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC24"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC25">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC25"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC25.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC25"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC26">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC26"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC26.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC26"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC27">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC27"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC27.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC27"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC28">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC28"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC28.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC28"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC29">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC29"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC29.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC29"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC30">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC30"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC30.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC30"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC31">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC31"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC31.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC31"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC32">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC32"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC32.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC32"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC33">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC33"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC33.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC33"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC34">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC34"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC34.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC34"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC35">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC35"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC35.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC35"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC36">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC36"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC36.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC36"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC37">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC37"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC37.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC37"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC38">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC38"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC38.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC38"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC39">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC39"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC39.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC39"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC40">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC40"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC40.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC40"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC41">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC41"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC41.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC41"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC42">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC42"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC42.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC42"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC43">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC43"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC43.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC43"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC44">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC44"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC44.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC44"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC45">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC45"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC45.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC45"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC46">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC46"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC46.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC46"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC47">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC47"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC47.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC47"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC48">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC48"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC48.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC48"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC49">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC49"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC49.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC49"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC50">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC50"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC50.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC50"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC51">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC51"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC51.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC51"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC52">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC52"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC52.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC52"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC53">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC53"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC53.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC53"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC54">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC54"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC54.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC54"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC55">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC55"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC55.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC55"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC56">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC56"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC56.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC56"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC57">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC57"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC57.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC57"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC58">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC58"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC58.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC58"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC59">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC59"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC59.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC59"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC60">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC60"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC60.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC60"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC61">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC61"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC61.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC61"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC62">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC62"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC62.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC62"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC63">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC63"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC63.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC63"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC64">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC64"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC64.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC64"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC65">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC65"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC65.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC65"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC66">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC66"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC66.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC66"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC67">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC67"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC67.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC67"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC68">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC68"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC68.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC68"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC69">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC69"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC69.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC69"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC70">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC70"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC70.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC70"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC71">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC71"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC71.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC71"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC72">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC72"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC72.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC72"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC73">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC73"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC73.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC73"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC74">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC74"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC74.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC74"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC75">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC75"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC75.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC75"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC76">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC76"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC76.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC76"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC77">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC77"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC77.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC77"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC78">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC78"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC78.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC78"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC79">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC79"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC79.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC79"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC80">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC80"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC80.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC80"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC81">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC81"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC81.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC81"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC82">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC82"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC82.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC82"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC83">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC83"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC83.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC83"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC84">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC84"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC84.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC84"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC85">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC85"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC85.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC85"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC86">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC86"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC86.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC86"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC87">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC87"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC87.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC87"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC88">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC88"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC88.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC88"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC89">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC89"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC89.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC89"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC90">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC90"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC90.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC90"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC91">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC91"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC91.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC91"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC92">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC92"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC92.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC92"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC93">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC93"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC93.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC93"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC94">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC94"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC94.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC94"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC95">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC95"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC95.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC95"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC96">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC96"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC96.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC96"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC97">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC97"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC97.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC97"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC98">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC98"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC98.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC98"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC99">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC99"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC99.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC99"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC100">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC100"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC100.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC100"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC101">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC101"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC101.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC101"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC102">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC102"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC102.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC102"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC103">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC103"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC103.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC103"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC104">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC104"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC104.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC104"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC105">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC105"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC105.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC105"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC106">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC106"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC106.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC106"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC107">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC107"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC107.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC107"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC108">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC108"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC108.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC108"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC109">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC109"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC109.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC109"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC110">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC110"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC110.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC110"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC111">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC111"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC111.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC111"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC112">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC112"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC112.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC112"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC113">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC113"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC113.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC113"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC114">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC114"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC114.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC114"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC115">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC115"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC115.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC115"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC116">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC116"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC116.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC116"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC117">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC117"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC117.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC117"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC118">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC118"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC118.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC118"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC119">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC119"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC119.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC119"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC120">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC120"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC120.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC120"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC121">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC121"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC121.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC121"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC122">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC122"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC122.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC122"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC123">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC123"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC123.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC123"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC124">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC124"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC124.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC124"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC125">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC125"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC125.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC125"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC126">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC126"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC126.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC126"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC127">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC127"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC127.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC127"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC128">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC128"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC128.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC128"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC129">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC129"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC129.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC129"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC130">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC130"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC130.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC130"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC131">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC131"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC131.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC131"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC132">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC132"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC132.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC132"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC133">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC133"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC133.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC133"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC134">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC134"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC134.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC134"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC135">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC135"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC135.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC135"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC136">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC136"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC136.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC136"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC137">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC137"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC137.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC137"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC138">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC138"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC138.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC138"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC139">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC139"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC139.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC139"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC140">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC140"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC140.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC140"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC141">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC141"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC141.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC141"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC142">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC142"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC142.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC142"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC143">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC143"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC143.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC143"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC144">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC144"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC144.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC144"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC145">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC145"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC145.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC145"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC146">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC146"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC146.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC146"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC147">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC147"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC147.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC147"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC148">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC148"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC148.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC148"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC149">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC149"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC149.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC149"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC150">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC150"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC150.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC150"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC151">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC151"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC151.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC151"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC152">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC152"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC152.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC152"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC153">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC153"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC153.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC153"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC154">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC154"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC154.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC154"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC155">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC155"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC155.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC155"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC156">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC156"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC156.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC156"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC157">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC157"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC157.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC157"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC158">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC158"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC158.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC158"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC159">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC159"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC159.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC159"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC160">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC160"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC160.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC160"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC161">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC161"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC161.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC161"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC162">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC162"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC162.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC162"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC163">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC163"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC163.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC163"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC164">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC164"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC164.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC164"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC165">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC165"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC165.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC165"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC166">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC166"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC166.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC166"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC167">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC167"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC167.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC167"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC168">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC168"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC168.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC168"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC169">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC169"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC169.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC169"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC170">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC170"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC170.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC170"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC171">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC171"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC171.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC171"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC172">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC172"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC172.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC172"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC173">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC173"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC173.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC173"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC174">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC174"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC174.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC174"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC175">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC175"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC175.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC175"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC176">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC176"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC176.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC176"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC177">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC177"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC177.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC177"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC178">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC178"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC178.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC178"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC179">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC179"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC179.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC179"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC180">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC180"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC180.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC180"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC181">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC181"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC181.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC181"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC182">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC182"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC182.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC182"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC183">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC183"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC183.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC183"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC184">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC184"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC184.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC184"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC185">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC185"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC185.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC185"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC186">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC186"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC186.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC186"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC187">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC187"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC187.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC187"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC188">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC188"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC188.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC188"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC189">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC189"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC189.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC189"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC190">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC190"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC190.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC190"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC191">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC191"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC191.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC191"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC192">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC192"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC192.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC192"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC193">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC193"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC193.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC193"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC194">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC194"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC194.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC194"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC195">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC195"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC195.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC195"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC196">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC196"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC196.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC196"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC197">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC197"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC197.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC197"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC198">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC198"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC198.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC198"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC199">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC199"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC199.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC199"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC200">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC200"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC200.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC200"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC201">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC201"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC201.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC201"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC202">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC202"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC202.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC202"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC203">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC203"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC203.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC203"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC204">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC204"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC204.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC204"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC205">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC205"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC205.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC205"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC206">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC206"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC206.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC206"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC207">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC207"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC207.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC207"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC208">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC208"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC208.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC208"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC209">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC209"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC209.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC209"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC210">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC210"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC210.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC210"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC211">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC211"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC211.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC211"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC212">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC212"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC212.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC212"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC213">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC213"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC213.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC213"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC214">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC214"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC214.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC214"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC215">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC215"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC215.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC215"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC216">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC216"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC216.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC216"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC217">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC217"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC217.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC217"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC218">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC218"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC218.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC218"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC219">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC219"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC219.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC219"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC220">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC220"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC220.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC220"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC221">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC221"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC221.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC221"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC222">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC222"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC222.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC222"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC223">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC223"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC223.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC223"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC224">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC224"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC224.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC224"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC225">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC225"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC225.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC225"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC226">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC226"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC226.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC226"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC227">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC227"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC227.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC227"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC228">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC228"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC228.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC228"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC229">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC229"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC229.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC229"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC230">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC230"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC230.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC230"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC231">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC231"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC231.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC231"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC232">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC232"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC232.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC232"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC233">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC233"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC233.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC233"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC234">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC234"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC234.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC234"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC235">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC235"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC235.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC235"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC236">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC236"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC236.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC236"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC237">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC237"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC237.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC237"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC238">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC238"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC238.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC238"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC239">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC239"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC239.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC239"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC240">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC240"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC240.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC240"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC241">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC241"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC241.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC241"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC242">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC242"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC242.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC242"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC243">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC243"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC243.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC243"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC244">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC244"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC244.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC244"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC245">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC245"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC245.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC245"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC246">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC246"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC246.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC246"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC247">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC247"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC247.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC247"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC248">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC248"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC248.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC248"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC249">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC249"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC249.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC249"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC250">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC250"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC250.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC250"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC251">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC251"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC251.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC251"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC252">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC252"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC252.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC252"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC253">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC253"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC253.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC253"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC254">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC254"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC254.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC254"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC255">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC255"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC255.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC255"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.CRC256">
            <summary>
            入力データの <see cref="T:CyclicRedundancyChecks.CRC256"/> チェックサムを計算します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRC256.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.CRC256"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="polynomial">CRC計算に使用する生成多項式。</param>
            <param name="initialValue">CRCの初期値。</param>
            <param name="finalXorValue">CRC計算の最後におこなう XOR 演算で使用する値。</param>
            <param name="reflectInput">CRC計算時に入力データのビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="reflectOutput">CRC計算の最後にビット順反映をするかどうか。反映する場合は <see langword="true"/>、反映しない場合は <see langword="false"/>。</param>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_3_GSM">
            <summary>
            <para>入力データの CRC-3/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC3"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03</b></para>
            <para><i>InitialValue </i>: <b>0x00</b></para>
            <para><i>FinalXorValue</i>: <b>0x07</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_3_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_3_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_3_ROHC">
            <summary>
            <para>入力データの CRC-3/ROHC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC3"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03</b></para>
            <para><i>InitialValue </i>: <b>0x07</b></para>
            <para><i>FinalXorValue</i>: <b>0x00</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_3_ROHC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_3_ROHC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_4_G_704">
            <summary>
            <para>入力データの CRC-4/G-704 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC4"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03</b></para>
            <para><i>InitialValue </i>: <b>0x00</b></para>
            <para><i>FinalXorValue</i>: <b>0x00</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_4_G_704.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_4_G_704"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_4_INTERLAKEN">
            <summary>
            <para>入力データの CRC-4/INTERLAKEN ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC4"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03</b></para>
            <para><i>InitialValue </i>: <b>0x0f</b></para>
            <para><i>FinalXorValue</i>: <b>0x0f</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_4_INTERLAKEN.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_4_INTERLAKEN"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_5_EPC_C1G2">
            <summary>
            <para>入力データの CRC-5/EPC-C1G2 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC5"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x009</b></para>
            <para><i>InitialValue </i>: <b>0x009</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_5_EPC_C1G2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_5_EPC_C1G2"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_5_G_704">
            <summary>
            <para>入力データの CRC-5/G-704 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC5"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x015</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_5_G_704.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_5_G_704"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_5_USB">
            <summary>
            <para>入力データの CRC-5/USB ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC5"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x005</b></para>
            <para><i>InitialValue </i>: <b>0x01f</b></para>
            <para><i>FinalXorValue</i>: <b>0x01f</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_5_USB.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_5_USB"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_A">
            <summary>
            <para>入力データの CRC-6/CDMA2000-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC6"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x027</b></para>
            <para><i>InitialValue </i>: <b>0x03f</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_B">
            <summary>
            <para>入力データの CRC-6/CDMA2000-B ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC6"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x007</b></para>
            <para><i>InitialValue </i>: <b>0x03f</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_B.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_6_CDMA2000_B"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_6_DARC">
            <summary>
            <para>入力データの CRC-6/DARC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC6"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x019</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_6_DARC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_6_DARC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_6_G_704">
            <summary>
            <para>入力データの CRC-6/G-704 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC6"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x003</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_6_G_704.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_6_G_704"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_6_GSM">
            <summary>
            <para>入力データの CRC-6/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC6"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x02f</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x03f</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_6_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_6_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_7_MMC">
            <summary>
            <para>入力データの CRC-7/MMC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC7"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x009</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_7_MMC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_7_MMC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_7_ROHC">
            <summary>
            <para>入力データの CRC-7/ROHC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC7"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x04f</b></para>
            <para><i>InitialValue </i>: <b>0x07f</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_7_ROHC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_7_ROHC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_7_UMTS">
            <summary>
            <para>入力データの CRC-7/UMTS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC7"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x045</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_7_UMTS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_7_UMTS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_AUTOSAR">
            <summary>
            <para>入力データの CRC-8/AUTOSAR ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x02f</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_AUTOSAR.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_AUTOSAR"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_BLUETOOTH">
            <summary>
            <para>入力データの CRC-8/BLUETOOTH ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0a7</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_BLUETOOTH.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_BLUETOOTH"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_CDMA2000">
            <summary>
            <para>入力データの CRC-8/CDMA2000 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x09b</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_CDMA2000.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_CDMA2000"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_DARC">
            <summary>
            <para>入力データの CRC-8/DARC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x039</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_DARC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_DARC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_DVB_S2">
            <summary>
            <para>入力データの CRC-8/DVB-S2 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0d5</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_DVB_S2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_DVB_S2"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_A">
            <summary>
            <para>入力データの CRC-8/GSM-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01d</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_B">
            <summary>
            <para>入力データの CRC-8/GSM-B ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x049</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_B.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_GSM_B"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_I_432_1">
            <summary>
            <para>入力データの CRC-8/I-432-1 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x007</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x055</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_I_432_1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_I_432_1"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_I_CODE">
            <summary>
            <para>入力データの CRC-8/I-CODE ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01d</b></para>
            <para><i>InitialValue </i>: <b>0x0fd</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_I_CODE.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_I_CODE"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_LTE">
            <summary>
            <para>入力データの CRC-8/LTE ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x09b</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_LTE.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_LTE"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_MAXIM_DOW">
            <summary>
            <para>入力データの CRC-8/MAXIM-DOW ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x031</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_MAXIM_DOW.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_MAXIM_DOW"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_MIFARE_MAD">
            <summary>
            <para>入力データの CRC-8/MIFARE-MAD ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01d</b></para>
            <para><i>InitialValue </i>: <b>0x0c7</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_MIFARE_MAD.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_MIFARE_MAD"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_NRSC_5">
            <summary>
            <para>入力データの CRC-8/NRSC-5 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x031</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_NRSC_5.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_NRSC_5"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_OPENSAFETY">
            <summary>
            <para>入力データの CRC-8/OPENSAFETY ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x02f</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_OPENSAFETY.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_OPENSAFETY"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_ROHC">
            <summary>
            <para>入力データの CRC-8/ROHC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x007</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_ROHC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_ROHC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_SAE_J1850">
            <summary>
            <para>入力データの CRC-8/SAE-J1850 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01d</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_SAE_J1850.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_SAE_J1850"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_SMBUS">
            <summary>
            <para>入力データの CRC-8/SMBUS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x007</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_SMBUS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_SMBUS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_TECH_3250">
            <summary>
            <para>入力データの CRC-8/TECH-3250 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01d</b></para>
            <para><i>InitialValue </i>: <b>0x0ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_TECH_3250.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_TECH_3250"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_8_WCDMA">
            <summary>
            <para>入力データの CRC-8/WCDMA ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC8"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x09b</b></para>
            <para><i>InitialValue </i>: <b>0x000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_8_WCDMA.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_8_WCDMA"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_10_ATM">
            <summary>
            <para>入力データの CRC-10/ATM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC10"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0233</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_10_ATM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_10_ATM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_10_CDMA2000">
            <summary>
            <para>入力データの CRC-10/CDMA2000 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC10"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03d9</b></para>
            <para><i>InitialValue </i>: <b>0x03ff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_10_CDMA2000.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_10_CDMA2000"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_10_GSM">
            <summary>
            <para>入力データの CRC-10/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC10"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0175</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x03ff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_10_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_10_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_11_FLEXRAY">
            <summary>
            <para>入力データの CRC-11/FLEXRAY ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC11"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0385</b></para>
            <para><i>InitialValue </i>: <b>0x001a</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_11_FLEXRAY.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_11_FLEXRAY"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_11_UMTS">
            <summary>
            <para>入力データの CRC-11/UMTS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC11"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0307</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_11_UMTS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_11_UMTS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_12_CDMA2000">
            <summary>
            <para>入力データの CRC-12/CDMA2000 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC12"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0f13</b></para>
            <para><i>InitialValue </i>: <b>0x0fff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_12_CDMA2000.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_12_CDMA2000"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_12_DECT">
            <summary>
            <para>入力データの CRC-12/DECT ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC12"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x080f</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_12_DECT.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_12_DECT"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_12_GSM">
            <summary>
            <para>入力データの CRC-12/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC12"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0d31</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0fff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_12_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_12_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_12_UMTS">
            <summary>
            <para>入力データの CRC-12/UMTS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC12"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x080f</b></para>
            <para><i>InitialValue </i>: <b>0x0000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_12_UMTS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_12_UMTS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_13_BBC">
            <summary>
            <para>入力データの CRC-13/BBC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC13"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01cf5</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_13_BBC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_13_BBC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_14_DARC">
            <summary>
            <para>入力データの CRC-14/DARC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC14"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x00805</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_14_DARC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_14_DARC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_14_GSM">
            <summary>
            <para>入力データの CRC-14/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC14"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0202d</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x03fff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_14_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_14_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_15_CAN">
            <summary>
            <para>入力データの CRC-15/CAN ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC15"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x04599</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_15_CAN.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_15_CAN"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_15_MPT1327">
            <summary>
            <para>入力データの CRC-15/MPT1327 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC15"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x06815</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00001</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_15_MPT1327.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_15_MPT1327"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_ARC">
            <summary>
            <para>入力データの CRC-16/ARC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_ARC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_ARC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_CDMA2000">
            <summary>
            <para>入力データの CRC-16/CDMA2000 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0c867</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_CDMA2000.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_CDMA2000"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_CMS">
            <summary>
            <para>入力データの CRC-16/CMS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_CMS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_CMS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_DDS_110">
            <summary>
            <para>入力データの CRC-16/DDS-110 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x0800d</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_DDS_110.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_DDS_110"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_R">
            <summary>
            <para>入力データの CRC-16/DECT-R ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x00589</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00001</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_R.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_R"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_X">
            <summary>
            <para>入力データの CRC-16/DECT-X ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x00589</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_X.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_DECT_X"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_DNP">
            <summary>
            <para>入力データの CRC-16/DNP ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03d65</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_DNP.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_DNP"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_EN_13757">
            <summary>
            <para>入力データの CRC-16/EN-13757 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x03d65</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_EN_13757.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_EN_13757"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_GENIBUS">
            <summary>
            <para>入力データの CRC-16/GENIBUS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_GENIBUS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_GENIBUS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_GSM">
            <summary>
            <para>入力データの CRC-16/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_3740">
            <summary>
            <para>入力データの CRC-16/IBM-3740 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_3740.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_3740"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_SDLC">
            <summary>
            <para>入力データの CRC-16/IBM-SDLC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_SDLC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_IBM_SDLC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_ISO_IEC_14443_3_A">
            <summary>
            <para>入力データの CRC-16/ISO-IEC-14443-3-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0c6c6</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_ISO_IEC_14443_3_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_ISO_IEC_14443_3_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_KERMIT">
            <summary>
            <para>入力データの CRC-16/KERMIT ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_KERMIT.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_KERMIT"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_LJ1200">
            <summary>
            <para>入力データの CRC-16/LJ1200 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x06f63</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_LJ1200.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_LJ1200"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_MAXIM_DOW">
            <summary>
            <para>入力データの CRC-16/MAXIM-DOW ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_MAXIM_DOW.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_MAXIM_DOW"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_MCRF4XX">
            <summary>
            <para>入力データの CRC-16/MCRF4XX ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_MCRF4XX.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_MCRF4XX"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_MODBUS">
            <summary>
            <para>入力データの CRC-16/MODBUS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_MODBUS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_MODBUS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_NRSC_5">
            <summary>
            <para>入力データの CRC-16/NRSC-5 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0080b</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_NRSC_5.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_NRSC_5"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_A">
            <summary>
            <para>入力データの CRC-16/OPENSAFETY-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x05935</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_B">
            <summary>
            <para>入力データの CRC-16/OPENSAFETY-B ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0755b</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_B.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_OPENSAFETY_B"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_PROFIBUS">
            <summary>
            <para>入力データの CRC-16/PROFIBUS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01dcf</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_PROFIBUS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_PROFIBUS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_RIELLO">
            <summary>
            <para>入力データの CRC-16/RIELLO ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x0b2aa</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_RIELLO.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_RIELLO"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_SPI_FUJITSU">
            <summary>
            <para>入力データの CRC-16/SPI-FUJITSU ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x01d0f</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_SPI_FUJITSU.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_SPI_FUJITSU"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_T10_DIF">
            <summary>
            <para>入力データの CRC-16/T10-DIF ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08bb7</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_T10_DIF.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_T10_DIF"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_TELEDISK">
            <summary>
            <para>入力データの CRC-16/TELEDISK ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0a097</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_TELEDISK.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_TELEDISK"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_TMS37157">
            <summary>
            <para>入力データの CRC-16/TMS37157 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x089ec</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_TMS37157.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_TMS37157"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_UMTS">
            <summary>
            <para>入力データの CRC-16/UMTS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_UMTS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_UMTS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_USB">
            <summary>
            <para>入力データの CRC-16/USB ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08005</b></para>
            <para><i>InitialValue </i>: <b>0x0ffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_USB.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_USB"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_16_XMODEM">
            <summary>
            <para>入力データの CRC-16/XMODEM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC16"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01021</b></para>
            <para><i>InitialValue </i>: <b>0x00000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_16_XMODEM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_16_XMODEM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_17_CAN_FD">
            <summary>
            <para>入力データの CRC-17/CAN-FD ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC17"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01685b</b></para>
            <para><i>InitialValue </i>: <b>0x000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_17_CAN_FD.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_17_CAN_FD"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_21_CAN_FD">
            <summary>
            <para>入力データの CRC-21/CAN-FD ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC21"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0102899</b></para>
            <para><i>InitialValue </i>: <b>0x0000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_21_CAN_FD.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_21_CAN_FD"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_BLE">
            <summary>
            <para>入力データの CRC-24/BLE ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x000065b</b></para>
            <para><i>InitialValue </i>: <b>0x0555555</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_BLE.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_BLE"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_A">
            <summary>
            <para>入力データの CRC-24/FLEXRAY-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x05d6dcb</b></para>
            <para><i>InitialValue </i>: <b>0x0fedcba</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_B">
            <summary>
            <para>入力データの CRC-24/FLEXRAY-B ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x05d6dcb</b></para>
            <para><i>InitialValue </i>: <b>0x0abcdef</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_B.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_FLEXRAY_B"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_INTERLAKEN">
            <summary>
            <para>入力データの CRC-24/INTERLAKEN ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0328b63</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_INTERLAKEN.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_INTERLAKEN"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_A">
            <summary>
            <para>入力データの CRC-24/LTE-A ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0864cfb</b></para>
            <para><i>InitialValue </i>: <b>0x0000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_A.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_A"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_B">
            <summary>
            <para>入力データの CRC-24/LTE-B ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0800063</b></para>
            <para><i>InitialValue </i>: <b>0x0000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_B.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_LTE_B"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_OPENPGP">
            <summary>
            <para>入力データの CRC-24/OPENPGP ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0864cfb</b></para>
            <para><i>InitialValue </i>: <b>0x0b704ce</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_OPENPGP.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_OPENPGP"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_24_OS_9">
            <summary>
            <para>入力データの CRC-24/OS-9 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC24"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0800063</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_24_OS_9.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_24_OS_9"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_30_CDMA">
            <summary>
            <para>入力データの CRC-30/CDMA ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC30"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x02030b9c7</b></para>
            <para><i>InitialValue </i>: <b>0x03fffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x03fffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_30_CDMA.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_30_CDMA"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_31_PHILIPS">
            <summary>
            <para>入力データの CRC-31/PHILIPS ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC31"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x07fffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x07fffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_31_PHILIPS.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_31_PHILIPS"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_AIXM">
            <summary>
            <para>入力データの CRC-32/AIXM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0814141ab</b></para>
            <para><i>InitialValue </i>: <b>0x000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_AIXM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_AIXM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_AUTOSAR">
            <summary>
            <para>入力データの CRC-32/AUTOSAR ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0f4acfb13</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_AUTOSAR.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_AUTOSAR"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_BASE91_D">
            <summary>
            <para>入力データの CRC-32/BASE91-D ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0a833982b</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_BASE91_D.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_BASE91_D"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_BZIP2">
            <summary>
            <para>入力データの CRC-32/BZIP2 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_BZIP2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_BZIP2"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_CD_ROM_EDC">
            <summary>
            <para>入力データの CRC-32/CD-ROM-EDC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x08001801b</b></para>
            <para><i>InitialValue </i>: <b>0x000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_CD_ROM_EDC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_CD_ROM_EDC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_CKSUM">
            <summary>
            <para>入力データの CRC-32/CKSUM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_CKSUM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_CKSUM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_ISCSI">
            <summary>
            <para>入力データの CRC-32/ISCSI ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x01edc6f41</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_ISCSI.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_ISCSI"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_ISO_HDLC">
            <summary>
            <para>入力データの CRC-32/ISO-HDLC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_ISO_HDLC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_ISO_HDLC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_JAMCRC">
            <summary>
            <para>入力データの CRC-32/JAMCRC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_JAMCRC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_JAMCRC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_MPEG_2">
            <summary>
            <para>入力データの CRC-32/MPEG-2 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x004c11db7</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_MPEG_2.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_MPEG_2"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_32_XFER">
            <summary>
            <para>入力データの CRC-32/XFER ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC32"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0000000af</b></para>
            <para><i>InitialValue </i>: <b>0x000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x000000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_32_XFER.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_32_XFER"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_40_GSM">
            <summary>
            <para>入力データの CRC-40/GSM ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC40"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x00004820009</b></para>
            <para><i>InitialValue </i>: <b>0x00000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_40_GSM.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_40_GSM"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_64_ECMA_182">
            <summary>
            <para>入力データの CRC-64/ECMA-182 ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC64"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x042f0e1eba9ea3693</b></para>
            <para><i>InitialValue </i>: <b>0x00000000000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x00000000000000000</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_64_ECMA_182.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_64_ECMA_182"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_64_GO_ISO">
            <summary>
            <para>入力データの CRC-64/GO-ISO ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC64"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x0000000000000001b</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_64_GO_ISO.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_64_GO_ISO"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_64_WE">
            <summary>
            <para>入力データの CRC-64/WE ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC64"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x042f0e1eba9ea3693</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>ReflectInput </i>: <b>false</b></para>
            <para><i>ReflectOutput</i>: <b>false</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_64_WE.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_64_WE"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_64_XZ">
            <summary>
            <para>入力データの CRC-64/XZ ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC64"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x042f0e1eba9ea3693</b></para>
            <para><i>InitialValue </i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>FinalXorValue</i>: <b>0x0ffffffffffffffff</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_64_XZ.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_64_XZ"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.Catalogs.CRC_82_DARC">
            <summary>
            <para>入力データの CRC-82/DARC ハッシュを計算します。</para>
            </summary>
            <remarks>
            <para>このアルゴリズムは <see cref="T:CyclicRedundancyChecks.CRC82"/> に基づいており、以下のパラメータが割り当てられています。</para>
            <para><i>Polynomial   </i>: <b>0x00308c0111011401440411</b></para>
            <para><i>InitialValue </i>: <b>0x0000000000000000000000</b></para>
            <para><i>FinalXorValue</i>: <b>0x0000000000000000000000</b></para>
            <para><i>ReflectInput </i>: <b>true</b></para>
            <para><i>ReflectOutput</i>: <b>true</b></para>
            </remarks>
        </member>
        <member name="M:CyclicRedundancyChecks.Catalogs.CRC_82_DARC.#ctor(System.Boolean,System.Boolean)">
            <summary>
            <see cref="T:CyclicRedundancyChecks.Catalogs.CRC_82_DARC"/> クラスの新しいインスタンスを作成します。
            </summary>
            <param name="isLookupTable">
            計算用テーブルを使用する場合は <see langword="true"/>、使用しない場合は <see langword="false"/> を指定します。
            使用する場合、事前に全 Byte ビットパターン (255) の計算テーブルを生成し、CRC 計算時の手順をいくつかスキップすることでパフォーマンスが向上する場合があります。
            しかし、テーブル生成にはコストが発生するので、インプットデータサイズが合計 255 バイト以下の場合は、テーブルを使用しない方がパフォーマンスが向上する可能性が高くなります。
            </param>
            <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="T:System.Byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        </member>
        <member name="T:CyclicRedundancyChecks.UnderlyingTypes.CRCByte">
            <summary>
            最大 8 ビットサイズまでの CRC 値を計算する機能を提供します。
            </summary>
        </member>
        <member name="T:CyclicRedundancyChecks.UnderlyingTypes.CRCUInt16">
            <summary>
            最大 16 ビットサイズまでの CRC 値を計算する機能を提供します。
            </summary>
        </member>
        <member name="T:CyclicRedundancyChecks.UnderlyingTypes.CRCUInt32">
            <summary>
            最大 32 ビットサイズまでの CRC 値を計算する機能を提供します。
            </summary>
        </member>
        <member name="T:CyclicRedundancyChecks.UnderlyingTypes.CRCUInt64">
            <summary>
            最大 64 ビットサイズまでの CRC 値を計算する機能を提供します。
            </summary>
        </member>
        <member name="T:CyclicRedundancyChecks.UnderlyingTypes.CRCBigInteger">
            <summary>
            任意のビットサイズの CRC 値を計算する機能を提供します。
            </summary>
        </member>
        <member name="M:CyclicRedundancyChecks.CRCUtility.BitReflect(System.Byte,System.Int32)">
            <summary>
            <see cref="T:System.Byte"/> のビット順序を反転させます。
            </summary>
            <param name="value">反転処理の対象となる値。</param>
            <param name="bitWidth">反転対象のビット桁幅。</param>
            <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        </member>
        <member name="M:CyclicRedundancyChecks.CRCUtility.BitReflect(System.UInt16,System.Int32)">
            <summary>
            <see cref="T:System.UInt16"/> のビット順序を反転させます。
            </summary>
            <param name="value">反転処理の対象となる値。</param>
            <param name="bitWidth">反転対象のビット桁幅。</param>
            <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        </member>
        <member name="M:CyclicRedundancyChecks.CRCUtility.BitReflect(System.UInt32,System.Int32)">
            <summary>
            <see cref="T:System.UInt32"/> のビット順序を反転させます。
            </summary>
            <param name="value">反転処理の対象となる値。</param>
            <param name="bitWidth">反転対象のビット桁幅。</param>
            <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        </member>
        <member name="M:CyclicRedundancyChecks.CRCUtility.BitReflect(System.UInt64,System.Int32)">
            <summary>
            <see cref="T:System.UInt64"/> のビット順序を反転させます。
            </summary>
            <param name="value">反転処理の対象となる値。</param>
            <param name="bitWidth">反転対象のビット桁幅。</param>
            <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        </member>
        <member name="M:CyclicRedundancyChecks.CRCUtility.BitReflect(System.Numerics.BigInteger,System.Int32)">
            <summary>
            <see cref="T:System.Numerics.BigInteger"/> のビット順序を反転させます。
            </summary>
            <param name="value">反転処理の対象となる値。</param>
            <param name="bitWidth">反転対象のビット桁幅。</param>
            <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        </member>
    </members>
</doc>
