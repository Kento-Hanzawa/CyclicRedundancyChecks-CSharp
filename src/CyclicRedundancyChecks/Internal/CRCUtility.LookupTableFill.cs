// <auto-generated>
// この .cs ファイルはT4によって自動的に生成されています。直接編集はせず、代わりに .tt ファイルを編集してください。
// </auto-generated>

namespace CyclicRedundancyChecks.Internal
{
    partial class CRCUtility
    {
        public static void LookupTableFill(in System.Span<global::System.Byte> table, in int bitWidth, in global::System.Byte polynomial)
        {
            for (int i = 0; i < CRC.LookupTableSize; i++)
            {
                byte dividend = (byte)(i & (byte)0xFF);
                table[i] = RemainderByPolynomial(dividend, bitWidth, polynomial);
            }
        }
    }

    partial class CRCUtility
    {
        public static void LookupTableFill(in System.Span<global::System.UInt16> table, in int bitWidth, in global::System.UInt16 polynomial)
        {
            for (int i = 0; i < CRC.LookupTableSize; i++)
            {
                byte dividend = (byte)(i & (byte)0xFF);
                table[i] = RemainderByPolynomial(dividend, bitWidth, polynomial);
            }
        }
    }

    partial class CRCUtility
    {
        public static void LookupTableFill(in System.Span<global::System.UInt32> table, in int bitWidth, in global::System.UInt32 polynomial)
        {
            for (int i = 0; i < CRC.LookupTableSize; i++)
            {
                byte dividend = (byte)(i & (byte)0xFF);
                table[i] = RemainderByPolynomial(dividend, bitWidth, polynomial);
            }
        }
    }

    partial class CRCUtility
    {
        public static void LookupTableFill(in System.Span<global::System.UInt64> table, in int bitWidth, in global::System.UInt64 polynomial)
        {
            for (int i = 0; i < CRC.LookupTableSize; i++)
            {
                byte dividend = (byte)(i & (byte)0xFF);
                table[i] = RemainderByPolynomial(dividend, bitWidth, polynomial);
            }
        }
    }

    partial class CRCUtility
    {
        public static void LookupTableFill(in System.Span<global::System.Numerics.BigInteger> table, in int bitWidth, in global::System.Numerics.BigInteger polynomial)
        {
            for (int i = 0; i < CRC.LookupTableSize; i++)
            {
                byte dividend = (byte)(i & (byte)0xFF);
                table[i] = RemainderByPolynomial(dividend, bitWidth, polynomial);
            }
        }
    }

}
