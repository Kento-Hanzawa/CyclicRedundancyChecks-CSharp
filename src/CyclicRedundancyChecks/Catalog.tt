<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="AlgorithmCatalog.ttinclude" #>
// <auto-generated>
// この .cs ファイルはT4によって自動的に生成されています。直接編集はせず、代わりに .tt ファイルを編集してください。
// </auto-generated>

namespace CyclicRedundancyChecks
{
    public static class Catalog
    {
<# foreach (var definition in AlgorithmCatalog.Definitions) { #>
        /// <summary>
        /// <para>CRC アルゴリズム "<#= definition.Name #>" の仕様を表す <see cref="CRCSpec"/> のインスタンスを取得します。( <see href="https://reveng.sourceforge.io/crc-catalogue/">Catalogue of parametrised CRC algorithms</see> )</para>
        /// </summary>
        /// <remarks>
        /// <para><i>Polynomial   </i>: <b><#= definition.Poly #></b>, <i>InitialValue </i>: <b><#= definition.Init #></b>, <i>FinalXorValue</i>: <b><#= definition.Xorout #></b></para>
        /// <para><i>ReflectInput </i>: <b><#= definition.Refin #></b>, <i>ReflectOutput</i>: <b><#= definition.Refout #></b></para>
        /// </remarks>
        public static readonly CRCSpec <#= definition.PropertyName #>
<# if (definition.IsBigCRC) { #>
            = new CRCSpec(<#= definition.Width #>, global::System.Numerics.BigInteger.Parse("<#= definition.PolyValueOnly #>", global::System.Globalization.NumberStyles.AllowHexSpecifier), global::System.Numerics.BigInteger.Parse("<#= definition.InitValueOnly #>", global::System.Globalization.NumberStyles.AllowHexSpecifier), global::System.Numerics.BigInteger.Parse("<#= definition.XoroutValueOnly #>", global::System.Globalization.NumberStyles.AllowHexSpecifier), <#= definition.Refin #>, <#= definition.Refout #>);
<# } else { #>
            = new CRCSpec(<#= definition.Width #>, (ulong)<#= definition.Poly #>, (ulong)<#= definition.Init #>, (ulong)<#= definition.Xorout #>, <#= definition.Refin #>, <#= definition.Refout #>);
<# } #>

<# } #>
    }
}
