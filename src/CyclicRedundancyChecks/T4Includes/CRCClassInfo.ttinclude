<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Numerics" #>
<#+ 
    private interface IUnderlyingClassInfo
    {
        Type   Type         { get; }
        string ClassName    { get; }
        int    ByteSize     { get; }
        int    BitSize      { get; }
        bool   IsBigInteger { get; }
    }

    private static class UnderlyingClassInfo
    {
        public static readonly IUnderlyingClassInfo Byte       = new _Byte();
        public static readonly IUnderlyingClassInfo UInt16     = new _UInt16();
        public static readonly IUnderlyingClassInfo UInt32     = new _UInt32();
        public static readonly IUnderlyingClassInfo UInt64     = new _UInt64();
        public static readonly IUnderlyingClassInfo BigInteger = new _BigInteger();

        public static IEnumerable<IUnderlyingClassInfo> All()
        {
            yield return Byte;
            yield return UInt16;
            yield return UInt32;
            yield return UInt64;
            yield return BigInteger;
        }

        private sealed class _Byte : IUnderlyingClassInfo
        {
            public Type   Type         { get; }
            public string ClassName    { get { return "CRC" + Type.Name; } }
            public int    ByteSize     { get { return sizeof(Byte); } }
            public int    BitSize      { get { return ByteSize * 8; } }
            public bool   IsBigInteger { get { return false; } }
            public _Byte() { this.Type = typeof(Byte); }
        }

        private sealed class _UInt16 : IUnderlyingClassInfo
        {
            public Type   Type         { get; }
            public string ClassName    { get { return "CRC" + Type.Name; } }
            public int    ByteSize     { get { return sizeof(UInt16); } }
            public int    BitSize      { get { return ByteSize * 8; } }
            public bool   IsBigInteger { get { return false; } }
            public _UInt16() { this.Type = typeof(UInt16); }
        }

        private sealed class _UInt32 : IUnderlyingClassInfo
        {
            public Type   Type         { get; }
            public string ClassName    { get { return "CRC" + Type.Name; } }
            public int    ByteSize     { get { return sizeof(UInt32); } }
            public int    BitSize      { get { return ByteSize * 8; } }
            public bool   IsBigInteger { get { return false; } }
            public _UInt32() { this.Type = typeof(UInt32); }
        }

        private sealed class _UInt64 : IUnderlyingClassInfo
        {
            public Type   Type         { get; }
            public string ClassName    { get { return "CRC" + Type.Name; } }
            public int    ByteSize     { get { return sizeof(UInt64); } }
            public int    BitSize      { get { return ByteSize * 8; } }
            public bool   IsBigInteger { get { return false; } }
            public _UInt64() { this.Type = typeof(UInt64); }
        }

        private sealed class _BigInteger : IUnderlyingClassInfo
        {
            public Type   Type         { get; }
            public string ClassName    { get { return "CRC" + Type.Name; } }
            public int    ByteSize     { get { throw new InvalidOperationException(Type.FullName + "型のバイトサイズは取得することが出来ません。"); } }
            public int    BitSize      { get { throw new InvalidOperationException(Type.FullName + "型のビットサイズは取得することが出来ません。"); } }
            public bool   IsBigInteger { get { return true; } }
            public _BigInteger() { this.Type = typeof(BigInteger); }
        }
    }

    private sealed class BitClassInfo
    {
        public const int BitMax = 256;

        public int BitWidth { get; }
        public IUnderlyingClassInfo InheritClassInfo { get; }
        public string ClassName  { get { return "CRC" + BitWidth; } }

        public static IEnumerable<BitClassInfo> All()
        {
            for (var i = 1; i <= BitMax; i++)
            {
                yield return new BitClassInfo(i);
            }
        }

        private BitClassInfo(int bitWidth)
        {
            this.BitWidth = bitWidth;
            if (bitWidth <= 8)
            {
                this.InheritClassInfo = UnderlyingClassInfo.Byte;
                //this.InheritClassInfo = UnderlyingClassInfo.UInt32;
            }
            else if (bitWidth <= 16)
            {
                this.InheritClassInfo = UnderlyingClassInfo.UInt16;
                //this.InheritClassInfo = UnderlyingClassInfo.UInt32;
            }
            else if (bitWidth <= 32)
            {
                this.InheritClassInfo = UnderlyingClassInfo.UInt32;
                //this.InheritClassInfo = UnderlyingClassInfo.UInt32;
            }
            else if (bitWidth <= 64)
            {
                this.InheritClassInfo = UnderlyingClassInfo.UInt64;
            }
            else
            {
                this.InheritClassInfo = UnderlyingClassInfo.BigInteger;
            }
        }
    }
#>