<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Numerics" #>
<#@ include file="..\Header.ttinclude" #>
<#
    var GenerateInfos = new (Type Type, int DefaultBitWidth)[]
    {
        (typeof(Byte)      , sizeof(Byte)   * 8),
        (typeof(UInt16)    , sizeof(UInt16) * 8),
        (typeof(UInt32)    , sizeof(UInt32) * 8),
        (typeof(UInt64)    , sizeof(UInt64) * 8),
        (typeof(BigInteger), sizeof(UInt64) * 8),
    };
#>
using System;
using System.Numerics;

namespace CyclicRedundancyChecks
{
    partial class CRCUtility
    {
<# foreach (var info in GenerateInfos) { #>
        /// <summary>
        /// <see cref="global::<#= info.Type.Namespace #>.<#= info.Type.Name #>"/> のビット順序を反転させます。
        /// </summary>
        /// <param name="value">反転処理の対象となる値。</param>
        /// <param name="bitWidth">反転対象のビット桁幅。</param>
        /// <returns><paramref name="value"/> の反転対象桁のビット順が反転された値。</returns>
        public static global::<#= info.Type.Namespace #>.<#= info.Type.Name #> BitReflect(global::<#= info.Type.Namespace #>.<#= info.Type.Name #> value, int bitWidth = <#= info.DefaultBitWidth #>)
        {
<# if (info.Type != typeof(BigInteger)) { #>
            if (<#= info.DefaultBitWidth #> < bitWidth)
            {
                bitWidth = <#= info.DefaultBitWidth #>;
            }

<# } #>
            global::<#= info.Type.Namespace #>.<#= info.Type.Name #> result = 0;
            for (int i = 0; i < bitWidth; i++)
            {
                if ((value & 1) == 1)
                {
                    result |= unchecked((global::<#= info.Type.Namespace #>.<#= info.Type.Name #>)((global::<#= info.Type.Namespace #>.<#= info.Type.Name #>)1 << (bitWidth - 1 - i)));
                }
                value = unchecked((global::<#= info.Type.Namespace #>.<#= info.Type.Name #>)(value >> 1));
            }
            return result;
        }

<# } #>
    }
}
