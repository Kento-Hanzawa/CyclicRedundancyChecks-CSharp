<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Numerics" #>
<#@ include file="T4Includes\Header.ttinclude" #>
<#@ include file="T4Includes\CRCClassInfo.ttinclude" #>
using System;
using CyclicRedundancyChecks.Underlying;

namespace CyclicRedundancyChecks
{
<# foreach (BitClassInfo info in BitClassInfo.All()) { #>
    /// <summary>
    /// 入力データの <see cref="<#= info.ClassName #>"/> チェックサムを計算します。
    /// </summary>
    public class <#= info.ClassName #> : <#= info.InheritClassInfo.ClassName #>
    {
        /// <summary>
        /// <see cref="<#= info.ClassName #>"/> クラスの新しいインスタンスを作成します。
        /// </summary>
        /// <param name="polynomial"></param>
        /// <param name="initialValue"></param>
        /// <param name="finalXorValue"></param>
        /// <param name="reflectInput"></param>
        /// <param name="reflectOutput"></param>
        /// <param name="isBigEndianResult">計算結果のCRC値をビッグエンディアン順に <see cref="byte"/> 配列に格納する場合は <see langword="true"/>、リトルエンディアン順に格納する場合は <see langword="false"/> を指定します。</param>
        public <#= info.ClassName #>(global::<#= info.InheritClassInfo.Type.FullName #> polynomial, global::<#= info.InheritClassInfo.Type.FullName #> initialValue, global::<#= info.InheritClassInfo.Type.FullName #> finalXorValue, bool reflectInput, bool reflectOutput, bool isBigEndianResult = false)
            : base(<#= info.BitWidth #>, polynomial, initialValue, finalXorValue, reflectInput, reflectOutput, isBigEndianResult)
        {
        }
    }

<# } #>
}