<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<# 
    var CRCRegulations = new (string CRCName, Type CRCType, int ByteSize, int BitSize, string ClassName)[]
    {
        ("CRC8" , typeof(byte)  , sizeof(byte)  , sizeof(byte)   * 8, "CRC8" ),
        ("CRC16", typeof(ushort), sizeof(ushort), sizeof(ushort) * 8, "CRC16"),
        ("CRC32", typeof(uint)  , sizeof(uint)  , sizeof(uint)   * 8, "CRC32"),
        ("CRC64", typeof(ulong) , sizeof(ulong) , sizeof(ulong)  * 8, "CRC64"),
    }; 
    
    // 参考：https://crccalc.com
    // 参考：http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
    var CRC8Infos = new (string CRCName, byte Polynomial, byte InitialValue, byte FinalXorValue, bool ReversedData, bool ReversedOut, string ClassName, string[] RegisterNames)[]
    {
        ("CRC-8"         , 0x07, 0x00, 0x00, false, false, "CRC8_STANDARD", new[] {"CRC-8"         , "CRC8"         }), // Standard
        ("CRC-8-CDMA2000", 0x9B, 0xFF, 0x00, false, false, "CRC8_CDMA2000", new[] {"CRC-8-CDMA2000", "CRC8-CDMA2000"}),
        ("CRC-8-DARC"    , 0x39, 0x00, 0x00, true , true , "CRC8_DARC"    , new[] {"CRC-8-DARC"    , "CRC8-DARC"    }),
        ("CRC-8-DVB-S2"  , 0xD5, 0x00, 0x00, false, false, "CRC8_DVB_S2"  , new[] {"CRC-8-DVB-S2"  , "CRC8-DVB-S2"  }),
        ("CRC-8-EBU"     , 0x1D, 0xFF, 0x00, true , true , "CRC8_EBU"     , new[] {"CRC-8-EBU"     , "CRC8-EBU"     }),
        ("CRC-8-I-CODE"  , 0x1D, 0xFD, 0x00, false, false, "CRC8_I_CODE"  , new[] {"CRC-8-I-CODE"  , "CRC8-I-CODE"  }),
        ("CRC-8-ITU"     , 0x07, 0x00, 0x55, false, false, "CRC8_ITU"     , new[] {"CRC-8-ITU"     , "CRC8-ITU"     }),
        ("CRC-8-MAXIM"   , 0x31, 0x00, 0x00, true , true , "CRC8_MAXIM"   , new[] {"CRC-8-MAXIM"   , "CRC8-MAXIM"   }),
        ("CRC-8-ROHC"    , 0x07, 0xFF, 0x00, true , true , "CRC8_ROHC"    , new[] {"CRC-8-ROHC"    , "CRC8-ROHC"    }),
        ("CRC-8-WCDMA"   , 0x9B, 0x00, 0x00, true , true , "CRC8_WCDMA"   , new[] {"CRC-8-WCDMA"   , "CRC8-WCDMA"   }),
    };

    var CRC16Infos = new (string CRCName, ushort Polynomial, ushort InitialValue, ushort FinalXorValue, bool ReversedData, bool ReversedOut, string ClassName, string[] RegisterNames)[]
    {
        ("CRC-16-CCITT-FALSE", 0x1021, 0xFFFF, 0x0000, false, false, "CRC16_CCITT_FALSE", new[] {"CRC-16-CCITT-FALSE", "CRC16-CCITT-FALSE"}),
        ("CRC-16-ARC"        , 0x8005, 0x0000, 0x0000, true , true , "CRC16_ARC"        , new[] {"CRC-16-ARC"        , "CRC16-ARC"        }),
        ("CRC-16-AUG-CCITT"  , 0x1021, 0x1D0F, 0x0000, false, false, "CRC16_AUG_CCITT"  , new[] {"CRC-16-AUG-CCITT"  , "CRC16-AUG-CCITT"  }),
        ("CRC-16-BUYPASS"    , 0x8005, 0x0000, 0x0000, false, false, "CRC16_BUYPASS"    , new[] {"CRC-16-BUYPASS"    , "CRC16-BUYPASS"    }),
        ("CRC-16-CDMA2000"   , 0xC867, 0xFFFF, 0x0000, false, false, "CRC16_CDMA2000"   , new[] {"CRC-16-CDMA2000"   , "CRC16-CDMA2000"   }),
        ("CRC-16-DDS-110"    , 0x8005, 0x800D, 0x0000, false, false, "CRC16_DDS_110"    , new[] {"CRC-16-DDS-110"    , "CRC16-DDS-110"    }),
        ("CRC-16-DECT-R"     , 0x0589, 0x0000, 0x0001, false, false, "CRC16_DECT_R"     , new[] {"CRC-16-DECT-R"     , "CRC16-DECT-R"     }),
        ("CRC-16-DECT-X"     , 0x0589, 0x0000, 0x0000, false, false, "CRC16_DECT_X"     , new[] {"CRC-16-DECT-X"     , "CRC16-DECT-X"     }),
        ("CRC-16-DNP"        , 0x3D65, 0x0000, 0xFFFF, true , true , "CRC16_DNP"        , new[] {"CRC-16-DNP"        , "CRC16-DNP"        }),
        ("CRC-16-EN-13757"   , 0x3D65, 0x0000, 0xFFFF, false, false, "CRC16_EN_13757"   , new[] {"CRC-16-EN-13757"   , "CRC16-EN-13757"   }),
        ("CRC-16-GENIBUS"    , 0x1021, 0xFFFF, 0xFFFF, false, false, "CRC16_GENIBUS"    , new[] {"CRC-16-GENIBUS"    , "CRC16-GENIBUS"    }),
        ("CRC-16-MAXIM"      , 0x8005, 0x0000, 0xFFFF, true , true , "CRC16_MAXIM"      , new[] {"CRC-16-MAXIM"      , "CRC16-MAXIM"      }),
        ("CRC-16-MCRF4XX"    , 0x1021, 0xFFFF, 0x0000, true , true , "CRC16_MCRF4XX"    , new[] {"CRC-16-MCRF4XX"    , "CRC16-MCRF4XX"    }),
        ("CRC-16-RIELLO"     , 0x1021, 0xB2AA, 0x0000, true , true , "CRC16_RIELLO"     , new[] {"CRC-16-RIELLO"     , "CRC16-RIELLO"     }),
        ("CRC-16-T10-DIF"    , 0x8BB7, 0x0000, 0x0000, false, false, "CRC16_T10_DIF"    , new[] {"CRC-16-T10-DIF"    , "CRC16-T10-DIF"    }),
        ("CRC-16-TELEDISK"   , 0xA097, 0x0000, 0x0000, false, false, "CRC16_TELEDISK"   , new[] {"CRC-16-TELEDISK"   , "CRC16-TELEDISK"   }),
        ("CRC-16-TMS37157"   , 0x1021, 0x89EC, 0x0000, true , true , "CRC16_TMS37157"   , new[] {"CRC-16-TMS37157"   , "CRC16-TMS37157"   }),
        ("CRC-16-USB"        , 0x8005, 0xFFFF, 0xFFFF, true , true , "CRC16_USB"        , new[] {"CRC-16-USB"        , "CRC16-USB"        , "CRC-16", "CRC16"}), // Standard
        ("CRC-16-A"          , 0x1021, 0xC6C6, 0x0000, true , true , "CRC16_A"          , new[] {"CRC-16-A"          , "CRC16-A"          }),
        ("CRC-16-KERMIT"     , 0x1021, 0x0000, 0x0000, true , true , "CRC16_KERMIT"     , new[] {"CRC-16-KERMIT"     , "CRC16-KERMIT"     }),
        ("CRC-16-MODBUS"     , 0x8005, 0xFFFF, 0x0000, true , true , "CRC16_MODBUS"     , new[] {"CRC-16-MODBUS"     , "CRC16-MODBUS"     }),
        ("CRC-16-X-25"       , 0x1021, 0xFFFF, 0xFFFF, true , true , "CRC16_X_25"       , new[] {"CRC-16-X-25"       , "CRC16-X-25"       }),
        ("CRC-16-XMODEM"     , 0x1021, 0x0000, 0x0000, false, false, "CRC16_XMODEM"     , new[] {"CRC-16-XMODEM"     , "CRC16-XMODEM"     }),
    };

    var CRC32Infos = new (string CRCName, uint Polynomial, uint InitialValue, uint FinalXorValue, bool ReversedData, bool ReversedOut, string ClassName, string[] RegisterNames)[]
    {
        ("CRC-32"       , 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, true , true , "CRC32_STANDARD", new[] {"CRC-32"       , "CRC32"       }), // Standard
        ("CRC-32-BZIP2" , 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, false, false, "CRC32_BZIP2"   , new[] {"CRC-32-BZIP2" , "CRC32-BZIP2" }),
        ("CRC-32-C"     , 0x1EDC6F41, 0xFFFFFFFF, 0xFFFFFFFF, true , true , "CRC32_C"       , new[] {"CRC-32-C"     , "CRC32-C"     }),
        ("CRC-32-D"     , 0xA833982B, 0xFFFFFFFF, 0xFFFFFFFF, true , true , "CRC32_D"       , new[] {"CRC-32-D"     , "CRC32-D"     }),
        ("CRC-32-MPEG-2", 0x04C11DB7, 0xFFFFFFFF, 0x00000000, false, false, "CRC32_MPEG_2"  , new[] {"CRC-32-MPEG-2", "CRC32-MPEG-2"}),
        ("CRC-32-POSIX" , 0x04C11DB7, 0x00000000, 0xFFFFFFFF, false, false, "CRC32_POSIX"   , new[] {"CRC-32-POSIX" , "CRC32-POSIX" }),
        ("CRC-32-Q"     , 0x814141AB, 0x00000000, 0x00000000, false, false, "CRC32_Q"       , new[] {"CRC-32-Q"     , "CRC32-Q"     }),
        ("CRC-32-JAMCRC", 0x04C11DB7, 0xFFFFFFFF, 0x00000000, true , true , "CRC32_JAMCRC"  , new[] {"CRC-32-JAMCRC", "CRC32-JAMCRC"}),
        ("CRC-32-XFER"  , 0x000000AF, 0x00000000, 0x00000000, false, false, "CRC32_XFER"    , new[] {"CRC-32-XFER"  , "CRC32-XFER"  }),
    };

    var CRC64Infos = new (string CRCName, ulong Polynomial, ulong InitialValue, ulong FinalXorValue, bool ReversedData, bool ReversedOut, string ClassName, string[] RegisterNames)[]
    {
        ("CRC-64-ECMA-182", 0x42F0E1EBA9EA3693, 0x0000000000000000, 0x0000000000000000, false, false, "CRC64_ECMA_182", new[] {"CRC-64-ECMA-182", "CRC64-ECMA-182", "CRC-64", "CRC64"}), // Standard
        ("CRC-64-GO-ISO"  , 0x000000000000001B, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, true , true , "CRC64_GO_ISO"  , new[] {"CRC-64-GO-ISO"  , "CRC64-GO-ISO"  }),
        ("CRC-64-WE"      , 0x42F0E1EBA9EA3693, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, false, false, "CRC64_WE"      , new[] {"CRC-64-WE"      , "CRC64-WE"      }),
        ("CRC-64-XZ"      , 0x42F0E1EBA9EA3693, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, true , true , "CRC64_XZ"      , new[] {"CRC-64-XZ"      , "CRC64-XZ"      }),
    }; #>
//
// CyclicRedundancyChecks
// 
// このコードはテキストテンプレートファイル (.tt) によって作成されています。
// 変更をおこなう場合は、テキストテンプレートファイル (.tt) を編集してください。
//
