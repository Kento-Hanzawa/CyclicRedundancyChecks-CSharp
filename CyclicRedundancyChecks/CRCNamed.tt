<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Numerics" #>
<#@ include file="Header.ttinclude" #>
<#
    var CatalogXml = File.ReadAllText(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + @"\\AlgorithmCatalog.xml");
    var Catalog = XDocument.Parse(CatalogXml);
#>
namespace CyclicRedundancyChecks
{
<# foreach (XElement definition in Catalog.Descendants("Definition")) { #>
<# var className = definition.Attribute("name").Value.Replace("-", "_").Replace("/", "_"); #>
    /// <summary>
    /// <para>入力データの <#= definition.Attribute("name").Value #> ハッシュを計算します。</para>
    /// <para>Polynomial: <#= definition.Attribute("poly").Value #></para>
    /// <para>InitialValue : <#= definition.Attribute("init").Value #></para>
    /// <para>FinalXorValue: <#= definition.Attribute("xorout").Value #></para>
    /// <para>ReflectInput : <#= definition.Attribute("refin").Value #></para>
    /// <para>ReflectOutput: <#= definition.Attribute("refout").Value #></para>
    /// </summary>
    public sealed class <#= className #> : CRC<#= definition.Attribute("width").Value #>
    {
        /// <summary>
        /// <see cref="<#= className #>"/> クラスの新しいインスタンスを作成します。
        /// </summary>
        public <#= className #>(bool isBigEndianResult = false)
<# if (int.Parse(definition.Attribute("width").Value) <= 64) { #>
            : base(<#= definition.Attribute("poly").Value #>, <#= definition.Attribute("init").Value #>, <#= definition.Attribute("xorout").Value #>, <#= definition.Attribute("refin").Value #>, <#= definition.Attribute("refout").Value #>, isBigEndianResult)
<# } else { #>
            : base(global::System.Numerics.BigInteger.Parse("<#= definition.Attribute("poly").Value.Replace("0x", "") #>", System.Globalization.NumberStyles.AllowHexSpecifier), global::System.Numerics.BigInteger.Parse("<#= definition.Attribute("init").Value.Replace("0x", "") #>", System.Globalization.NumberStyles.AllowHexSpecifier), global::System.Numerics.BigInteger.Parse("<#= definition.Attribute("xorout").Value.Replace("0x", "") #>", System.Globalization.NumberStyles.AllowHexSpecifier), <#= definition.Attribute("refin").Value #>, <#= definition.Attribute("refout").Value #>, isBigEndianResult)
<# } #>
        {
        }
    }

<# } #>
}